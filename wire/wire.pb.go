// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.3
// source: wire.proto

package wire

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServType int32

const (
	ServType_CNTRLR ServType = 0
	ServType_CMPMGR ServType = 1
)

// Enum value maps for ServType.
var (
	ServType_name = map[int32]string{
		0: "CNTRLR",
		1: "CMPMGR",
	}
	ServType_value = map[string]int32{
		"CNTRLR": 0,
		"CMPMGR": 1,
	}
)

func (x ServType) Enum() *ServType {
	p := new(ServType)
	*p = x
	return p
}

func (x ServType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServType) Descriptor() protoreflect.EnumDescriptor {
	return file_wire_proto_enumTypes[0].Descriptor()
}

func (ServType) Type() protoreflect.EnumType {
	return &file_wire_proto_enumTypes[0]
}

func (x ServType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServType.Descriptor instead.
func (ServType) EnumDescriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{0}
}

type FileType int32

const (
	FileType_BIN FileType = 0
	FileType_TXT FileType = 1
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "BIN",
		1: "TXT",
	}
	FileType_value = map[string]int32{
		"BIN": 0,
		"TXT": 1,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_wire_proto_enumTypes[1].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_wire_proto_enumTypes[1]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{1}
}

type ChunkId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FName string   `protobuf:"bytes,1,opt,name=f_name,json=fName,proto3" json:"f_name,omitempty"`
	FType FileType `protobuf:"varint,2,opt,name=f_type,json=fType,proto3,enum=FileType" json:"f_type,omitempty"`
	CIdx  int32    `protobuf:"varint,3,opt,name=c_idx,json=cIdx,proto3" json:"c_idx,omitempty"`
	CSize int64    `protobuf:"varint,4,opt,name=c_size,json=cSize,proto3" json:"c_size,omitempty"`
}

func (x *ChunkId) Reset() {
	*x = ChunkId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkId) ProtoMessage() {}

func (x *ChunkId) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkId.ProtoReflect.Descriptor instead.
func (*ChunkId) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{0}
}

func (x *ChunkId) GetFName() string {
	if x != nil {
		return x.FName
	}
	return ""
}

func (x *ChunkId) GetFType() FileType {
	if x != nil {
		return x.FType
	}
	return FileType_BIN
}

func (x *ChunkId) GetCIdx() int32 {
	if x != nil {
		return x.CIdx
	}
	return 0
}

func (x *ChunkId) GetCSize() int64 {
	if x != nil {
		return x.CSize
	}
	return 0
}

type ChunkMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FType FileType        `protobuf:"varint,1,opt,name=f_type,json=fType,proto3,enum=FileType" json:"f_type,omitempty"`
	CMap  map[int32]int64 `protobuf:"bytes,2,rep,name=c_map,json=cMap,proto3" json:"c_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ChunkMap) Reset() {
	*x = ChunkMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkMap) ProtoMessage() {}

func (x *ChunkMap) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkMap.ProtoReflect.Descriptor instead.
func (*ChunkMap) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{1}
}

func (x *ChunkMap) GetFType() FileType {
	if x != nil {
		return x.FType
	}
	return FileType_BIN
}

func (x *ChunkMap) GetCMap() map[int32]int64 {
	if x != nil {
		return x.CMap
	}
	return nil
}

type StringTripleCSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	S1    string `protobuf:"bytes,1,opt,name=s1,proto3" json:"s1,omitempty"`
	S2    string `protobuf:"bytes,2,opt,name=s2,proto3" json:"s2,omitempty"`
	S3    string `protobuf:"bytes,3,opt,name=s3,proto3" json:"s3,omitempty"`
	CSize int64  `protobuf:"varint,4,opt,name=c_size,json=cSize,proto3" json:"c_size,omitempty"`
}

func (x *StringTripleCSize) Reset() {
	*x = StringTripleCSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringTripleCSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringTripleCSize) ProtoMessage() {}

func (x *StringTripleCSize) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringTripleCSize.ProtoReflect.Descriptor instead.
func (*StringTripleCSize) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{2}
}

func (x *StringTripleCSize) GetS1() string {
	if x != nil {
		return x.S1
	}
	return ""
}

func (x *StringTripleCSize) GetS2() string {
	if x != nil {
		return x.S2
	}
	return ""
}

func (x *StringTripleCSize) GetS3() string {
	if x != nil {
		return x.S3
	}
	return ""
}

func (x *StringTripleCSize) GetCSize() int64 {
	if x != nil {
		return x.CSize
	}
	return 0
}

type ReducerAddr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idx  int32  `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
	Addr string `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
}

func (x *ReducerAddr) Reset() {
	*x = ReducerAddr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReducerAddr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReducerAddr) ProtoMessage() {}

func (x *ReducerAddr) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReducerAddr.ProtoReflect.Descriptor instead.
func (*ReducerAddr) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{3}
}

func (x *ReducerAddr) GetIdx() int32 {
	if x != nil {
		return x.Idx
	}
	return 0
}

func (x *ReducerAddr) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

type Defibrillate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Defibrillate) Reset() {
	*x = Defibrillate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Defibrillate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Defibrillate) ProtoMessage() {}

func (x *Defibrillate) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Defibrillate.ProtoReflect.Descriptor instead.
func (*Defibrillate) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{4}
}

func (x *Defibrillate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Space    uint64               `protobuf:"varint,1,opt,name=space,proto3" json:"space,omitempty"`
	Served   int32                `protobuf:"varint,2,opt,name=served,proto3" json:"served,omitempty"`
	Busy     int64                `protobuf:"varint,3,opt,name=busy,proto3" json:"busy,omitempty"`
	ChunkMap map[string]*ChunkMap `protobuf:"bytes,4,rep,name=chunk_map,json=chunkMap,proto3" json:"chunk_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{5}
}

func (x *Heartbeat) GetSpace() uint64 {
	if x != nil {
		return x.Space
	}
	return 0
}

func (x *Heartbeat) GetServed() int32 {
	if x != nil {
		return x.Served
	}
	return 0
}

func (x *Heartbeat) GetBusy() int64 {
	if x != nil {
		return x.Busy
	}
	return 0
}

func (x *Heartbeat) GetChunkMap() map[string]*ChunkMap {
	if x != nil {
		return x.ChunkMap
	}
	return nil
}

type ChunkNodePorts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// array of strings of {node:port}'s; they're in order so
	// nodes[0] is first chunk, nodes[n] is nth chunk
	Nodes []*StringTripleCSize `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *ChunkNodePorts) Reset() {
	*x = ChunkNodePorts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkNodePorts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkNodePorts) ProtoMessage() {}

func (x *ChunkNodePorts) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkNodePorts.ProtoReflect.Descriptor instead.
func (*ChunkNodePorts) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{6}
}

func (x *ChunkNodePorts) GetNodes() []*StringTripleCSize {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type ChunkUpload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkId  *ChunkId `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Checksum []byte   `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Data     []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ChunkUpload) Reset() {
	*x = ChunkUpload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkUpload) ProtoMessage() {}

func (x *ChunkUpload) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkUpload.ProtoReflect.Descriptor instead.
func (*ChunkUpload) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{7}
}

func (x *ChunkUpload) GetChunkId() *ChunkId {
	if x != nil {
		return x.ChunkId
	}
	return nil
}

func (x *ChunkUpload) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *ChunkUpload) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ChunkDownload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkId  *ChunkId `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Checksum []byte   `protobuf:"bytes,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Data     []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ChunkDownload) Reset() {
	*x = ChunkDownload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkDownload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkDownload) ProtoMessage() {}

func (x *ChunkDownload) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkDownload.ProtoReflect.Descriptor instead.
func (*ChunkDownload) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{8}
}

func (x *ChunkDownload) GetChunkId() *ChunkId {
	if x != nil {
		return x.ChunkId
	}
	return nil
}

func (x *ChunkDownload) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

func (x *ChunkDownload) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ChunkReplicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkId *ChunkId `protobuf:"bytes,1,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
	Nodes   []string `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *ChunkReplicate) Reset() {
	*x = ChunkReplicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChunkReplicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkReplicate) ProtoMessage() {}

func (x *ChunkReplicate) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkReplicate.ProtoReflect.Descriptor instead.
func (*ChunkReplicate) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{9}
}

func (x *ChunkReplicate) GetChunkId() *ChunkId {
	if x != nil {
		return x.ChunkId
	}
	return nil
}

func (x *ChunkReplicate) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NChunks int64  `protobuf:"varint,2,opt,name=n_chunks,json=nChunks,proto3" json:"n_chunks,omitempty"`
	FSize   int64  `protobuf:"varint,3,opt,name=f_size,json=fSize,proto3" json:"f_size,omitempty"`
	CSize   int64  `protobuf:"varint,4,opt,name=c_size,json=cSize,proto3" json:"c_size,omitempty"`
}

func (x *Store) Reset() {
	*x = Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store) ProtoMessage() {}

func (x *Store) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store.ProtoReflect.Descriptor instead.
func (*Store) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{10}
}

func (x *Store) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Store) GetNChunks() int64 {
	if x != nil {
		return x.NChunks
	}
	return 0
}

func (x *Store) GetFSize() int64 {
	if x != nil {
		return x.FSize
	}
	return 0
}

func (x *Store) GetCSize() int64 {
	if x != nil {
		return x.CSize
	}
	return 0
}

type RetrieveRq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *RetrieveRq) Reset() {
	*x = RetrieveRq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveRq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveRq) ProtoMessage() {}

func (x *RetrieveRq) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveRq.ProtoReflect.Descriptor instead.
func (*RetrieveRq) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{11}
}

func (x *RetrieveRq) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type RetrieveRs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FType    FileType             `protobuf:"varint,1,opt,name=f_type,json=fType,proto3,enum=FileType" json:"f_type,omitempty"`
	Retrieve []*StringTripleCSize `protobuf:"bytes,2,rep,name=retrieve,proto3" json:"retrieve,omitempty"`
}

func (x *RetrieveRs) Reset() {
	*x = RetrieveRs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveRs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveRs) ProtoMessage() {}

func (x *RetrieveRs) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveRs.ProtoReflect.Descriptor instead.
func (*RetrieveRs) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{12}
}

func (x *RetrieveRs) GetFType() FileType {
	if x != nil {
		return x.FType
	}
	return FileType_BIN
}

func (x *RetrieveRs) GetRetrieve() []*StringTripleCSize {
	if x != nil {
		return x.Retrieve
	}
	return nil
}

type Delete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delete string `protobuf:"bytes,1,opt,name=delete,proto3" json:"delete,omitempty"`
}

func (x *Delete) Reset() {
	*x = Delete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Delete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delete) ProtoMessage() {}

func (x *Delete) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delete.ProtoReflect.Descriptor instead.
func (*Delete) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{13}
}

func (x *Delete) GetDelete() string {
	if x != nil {
		return x.Delete
	}
	return ""
}

type MRRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobName   string   `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	FileNames []string `protobuf:"bytes,2,rep,name=file_names,json=fileNames,proto3" json:"file_names,omitempty"`
	PluginGo  []byte   `protobuf:"bytes,3,opt,name=plugin_go,json=pluginGo,proto3" json:"plugin_go,omitempty"`
	Checksum  []byte   `protobuf:"bytes,4,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (x *MRRequest) Reset() {
	*x = MRRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MRRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MRRequest) ProtoMessage() {}

func (x *MRRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MRRequest.ProtoReflect.Descriptor instead.
func (*MRRequest) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{14}
}

func (x *MRRequest) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *MRRequest) GetFileNames() []string {
	if x != nil {
		return x.FileNames
	}
	return nil
}

func (x *MRRequest) GetPluginGo() []byte {
	if x != nil {
		return x.PluginGo
	}
	return nil
}

func (x *MRRequest) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

type MRUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R            int32          `protobuf:"varint,1,opt,name=R,proto3" json:"R,omitempty"`
	Update       string         `protobuf:"bytes,2,opt,name=update,proto3" json:"update,omitempty"`
	ReducerAddrs []*ReducerAddr `protobuf:"bytes,3,rep,name=reducer_addrs,json=reducerAddrs,proto3" json:"reducer_addrs,omitempty"`
}

func (x *MRUpdate) Reset() {
	*x = MRUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MRUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MRUpdate) ProtoMessage() {}

func (x *MRUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MRUpdate.ProtoReflect.Descriptor instead.
func (*MRUpdate) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{15}
}

func (x *MRUpdate) GetR() int32 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *MRUpdate) GetUpdate() string {
	if x != nil {
		return x.Update
	}
	return ""
}

func (x *MRUpdate) GetReducerAddrs() []*ReducerAddr {
	if x != nil {
		return x.ReducerAddrs
	}
	return nil
}

type MRMapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobName      string   `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	MId          int32    `protobuf:"varint,2,opt,name=m_id,json=mId,proto3" json:"m_id,omitempty"`
	ChunkNames   []string `protobuf:"bytes,3,rep,name=chunk_names,json=chunkNames,proto3" json:"chunk_names,omitempty"`
	ReducerAddrs []string `protobuf:"bytes,4,rep,name=reducer_addrs,json=reducerAddrs,proto3" json:"reducer_addrs,omitempty"`
	PluginSo     []byte   `protobuf:"bytes,5,opt,name=plugin_so,json=pluginSo,proto3" json:"plugin_so,omitempty"`
	Checksum     []byte   `protobuf:"bytes,6,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (x *MRMapReq) Reset() {
	*x = MRMapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MRMapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MRMapReq) ProtoMessage() {}

func (x *MRMapReq) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MRMapReq.ProtoReflect.Descriptor instead.
func (*MRMapReq) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{16}
}

func (x *MRMapReq) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *MRMapReq) GetMId() int32 {
	if x != nil {
		return x.MId
	}
	return 0
}

func (x *MRMapReq) GetChunkNames() []string {
	if x != nil {
		return x.ChunkNames
	}
	return nil
}

func (x *MRMapReq) GetReducerAddrs() []string {
	if x != nil {
		return x.ReducerAddrs
	}
	return nil
}

func (x *MRMapReq) GetPluginSo() []byte {
	if x != nil {
		return x.PluginSo
	}
	return nil
}

func (x *MRMapReq) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

type MRMapResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobName  string `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	RId      int32  `protobuf:"varint,2,opt,name=r_id,json=rId,proto3" json:"r_id,omitempty"`
	MId      int32  `protobuf:"varint,3,opt,name=m_id,json=mId,proto3" json:"m_id,omitempty"`
	Kvs      []byte `protobuf:"bytes,4,opt,name=kvs,proto3" json:"kvs,omitempty"`
	Checksum []byte `protobuf:"bytes,5,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (x *MRMapResult) Reset() {
	*x = MRMapResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MRMapResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MRMapResult) ProtoMessage() {}

func (x *MRMapResult) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MRMapResult.ProtoReflect.Descriptor instead.
func (*MRMapResult) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{17}
}

func (x *MRMapResult) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *MRMapResult) GetRId() int32 {
	if x != nil {
		return x.RId
	}
	return 0
}

func (x *MRMapResult) GetMId() int32 {
	if x != nil {
		return x.MId
	}
	return 0
}

func (x *MRMapResult) GetKvs() []byte {
	if x != nil {
		return x.Kvs
	}
	return nil
}

func (x *MRMapResult) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

type MRReduceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobName  string `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	RId      int32  `protobuf:"varint,2,opt,name=r_id,json=rId,proto3" json:"r_id,omitempty"`
	M        int32  `protobuf:"varint,3,opt,name=m,proto3" json:"m,omitempty"`
	PluginSo []byte `protobuf:"bytes,4,opt,name=plugin_so,json=pluginSo,proto3" json:"plugin_so,omitempty"`
	Checksum []byte `protobuf:"bytes,5,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (x *MRReduceReq) Reset() {
	*x = MRReduceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MRReduceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MRReduceReq) ProtoMessage() {}

func (x *MRReduceReq) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MRReduceReq.ProtoReflect.Descriptor instead.
func (*MRReduceReq) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{18}
}

func (x *MRReduceReq) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *MRReduceReq) GetRId() int32 {
	if x != nil {
		return x.RId
	}
	return 0
}

func (x *MRReduceReq) GetM() int32 {
	if x != nil {
		return x.M
	}
	return 0
}

func (x *MRReduceReq) GetPluginSo() []byte {
	if x != nil {
		return x.PluginSo
	}
	return nil
}

func (x *MRReduceReq) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

type MRReduceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobName  string `protobuf:"bytes,1,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	RId      int32  `protobuf:"varint,2,opt,name=r_id,json=rId,proto3" json:"r_id,omitempty"`
	Data     []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Checksum []byte `protobuf:"bytes,4,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (x *MRReduceResult) Reset() {
	*x = MRReduceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MRReduceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MRReduceResult) ProtoMessage() {}

func (x *MRReduceResult) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MRReduceResult.ProtoReflect.Descriptor instead.
func (*MRReduceResult) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{19}
}

func (x *MRReduceResult) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *MRReduceResult) GetRId() int32 {
	if x != nil {
		return x.RId
	}
	return 0
}

func (x *MRReduceResult) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MRReduceResult) GetChecksum() []byte {
	if x != nil {
		return x.Checksum
	}
	return nil
}

type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List string `protobuf:"bytes,1,opt,name=list,proto3" json:"list,omitempty"`
}

func (x *List) Reset() {
	*x = List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{20}
}

func (x *List) GetList() string {
	if x != nil {
		return x.List
	}
	return ""
}

type Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info string `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *Info) Reset() {
	*x = Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Info) ProtoMessage() {}

func (x *Info) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Info.ProtoReflect.Descriptor instead.
func (*Info) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{21}
}

func (x *Info) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity string `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *Activity) Reset() {
	*x = Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{22}
}

func (x *Activity) GetActivity() string {
	if x != nil {
		return x.Activity
	}
	return ""
}

type Repeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Repeat) Reset() {
	*x = Repeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repeat) ProtoMessage() {}

func (x *Repeat) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repeat.ProtoReflect.Descriptor instead.
func (*Repeat) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{23}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{24}
}

func (x *Message) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Wrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*Wrapper_Df
	//	*Wrapper_Hb
	//	*Wrapper_Cnp
	//	*Wrapper_Cul
	//	*Wrapper_Cdl
	//	*Wrapper_Crp
	//	*Wrapper_St
	//	*Wrapper_Rtq
	//	*Wrapper_Rtr
	//	*Wrapper_Dl
	//	*Wrapper_Mr
	//	*Wrapper_Mu
	//	*Wrapper_Mrm
	//	*Wrapper_Mrmr
	//	*Wrapper_Mrr
	//	*Wrapper_Mrrr
	//	*Wrapper_Ls
	//	*Wrapper_If
	//	*Wrapper_Ac
	//	*Wrapper_Rp
	//	*Wrapper_Ms
	Msg isWrapper_Msg `protobuf_oneof:"msg"`
}

func (x *Wrapper) Reset() {
	*x = Wrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wrapper) ProtoMessage() {}

func (x *Wrapper) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wrapper.ProtoReflect.Descriptor instead.
func (*Wrapper) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{25}
}

func (m *Wrapper) GetMsg() isWrapper_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *Wrapper) GetDf() *Defibrillate {
	if x, ok := x.GetMsg().(*Wrapper_Df); ok {
		return x.Df
	}
	return nil
}

func (x *Wrapper) GetHb() *Heartbeat {
	if x, ok := x.GetMsg().(*Wrapper_Hb); ok {
		return x.Hb
	}
	return nil
}

func (x *Wrapper) GetCnp() *ChunkNodePorts {
	if x, ok := x.GetMsg().(*Wrapper_Cnp); ok {
		return x.Cnp
	}
	return nil
}

func (x *Wrapper) GetCul() *ChunkUpload {
	if x, ok := x.GetMsg().(*Wrapper_Cul); ok {
		return x.Cul
	}
	return nil
}

func (x *Wrapper) GetCdl() *ChunkDownload {
	if x, ok := x.GetMsg().(*Wrapper_Cdl); ok {
		return x.Cdl
	}
	return nil
}

func (x *Wrapper) GetCrp() *ChunkReplicate {
	if x, ok := x.GetMsg().(*Wrapper_Crp); ok {
		return x.Crp
	}
	return nil
}

func (x *Wrapper) GetSt() *Store {
	if x, ok := x.GetMsg().(*Wrapper_St); ok {
		return x.St
	}
	return nil
}

func (x *Wrapper) GetRtq() *RetrieveRq {
	if x, ok := x.GetMsg().(*Wrapper_Rtq); ok {
		return x.Rtq
	}
	return nil
}

func (x *Wrapper) GetRtr() *RetrieveRs {
	if x, ok := x.GetMsg().(*Wrapper_Rtr); ok {
		return x.Rtr
	}
	return nil
}

func (x *Wrapper) GetDl() *Delete {
	if x, ok := x.GetMsg().(*Wrapper_Dl); ok {
		return x.Dl
	}
	return nil
}

func (x *Wrapper) GetMr() *MRRequest {
	if x, ok := x.GetMsg().(*Wrapper_Mr); ok {
		return x.Mr
	}
	return nil
}

func (x *Wrapper) GetMu() *MRUpdate {
	if x, ok := x.GetMsg().(*Wrapper_Mu); ok {
		return x.Mu
	}
	return nil
}

func (x *Wrapper) GetMrm() *MRMapReq {
	if x, ok := x.GetMsg().(*Wrapper_Mrm); ok {
		return x.Mrm
	}
	return nil
}

func (x *Wrapper) GetMrmr() *MRMapResult {
	if x, ok := x.GetMsg().(*Wrapper_Mrmr); ok {
		return x.Mrmr
	}
	return nil
}

func (x *Wrapper) GetMrr() *MRReduceReq {
	if x, ok := x.GetMsg().(*Wrapper_Mrr); ok {
		return x.Mrr
	}
	return nil
}

func (x *Wrapper) GetMrrr() *MRReduceResult {
	if x, ok := x.GetMsg().(*Wrapper_Mrrr); ok {
		return x.Mrrr
	}
	return nil
}

func (x *Wrapper) GetLs() *List {
	if x, ok := x.GetMsg().(*Wrapper_Ls); ok {
		return x.Ls
	}
	return nil
}

func (x *Wrapper) GetIf() *Info {
	if x, ok := x.GetMsg().(*Wrapper_If); ok {
		return x.If
	}
	return nil
}

func (x *Wrapper) GetAc() *Activity {
	if x, ok := x.GetMsg().(*Wrapper_Ac); ok {
		return x.Ac
	}
	return nil
}

func (x *Wrapper) GetRp() *Repeat {
	if x, ok := x.GetMsg().(*Wrapper_Rp); ok {
		return x.Rp
	}
	return nil
}

func (x *Wrapper) GetMs() *Message {
	if x, ok := x.GetMsg().(*Wrapper_Ms); ok {
		return x.Ms
	}
	return nil
}

type isWrapper_Msg interface {
	isWrapper_Msg()
}

type Wrapper_Df struct {
	Df *Defibrillate `protobuf:"bytes,1,opt,name=df,proto3,oneof"`
}

type Wrapper_Hb struct {
	Hb *Heartbeat `protobuf:"bytes,2,opt,name=hb,proto3,oneof"`
}

type Wrapper_Cnp struct {
	Cnp *ChunkNodePorts `protobuf:"bytes,3,opt,name=cnp,proto3,oneof"`
}

type Wrapper_Cul struct {
	Cul *ChunkUpload `protobuf:"bytes,4,opt,name=cul,proto3,oneof"`
}

type Wrapper_Cdl struct {
	Cdl *ChunkDownload `protobuf:"bytes,5,opt,name=cdl,proto3,oneof"`
}

type Wrapper_Crp struct {
	Crp *ChunkReplicate `protobuf:"bytes,6,opt,name=crp,proto3,oneof"`
}

type Wrapper_St struct {
	St *Store `protobuf:"bytes,7,opt,name=st,proto3,oneof"`
}

type Wrapper_Rtq struct {
	Rtq *RetrieveRq `protobuf:"bytes,8,opt,name=rtq,proto3,oneof"`
}

type Wrapper_Rtr struct {
	Rtr *RetrieveRs `protobuf:"bytes,9,opt,name=rtr,proto3,oneof"`
}

type Wrapper_Dl struct {
	Dl *Delete `protobuf:"bytes,10,opt,name=dl,proto3,oneof"`
}

type Wrapper_Mr struct {
	Mr *MRRequest `protobuf:"bytes,11,opt,name=mr,proto3,oneof"`
}

type Wrapper_Mu struct {
	Mu *MRUpdate `protobuf:"bytes,12,opt,name=mu,proto3,oneof"`
}

type Wrapper_Mrm struct {
	Mrm *MRMapReq `protobuf:"bytes,13,opt,name=mrm,proto3,oneof"`
}

type Wrapper_Mrmr struct {
	Mrmr *MRMapResult `protobuf:"bytes,14,opt,name=mrmr,proto3,oneof"`
}

type Wrapper_Mrr struct {
	Mrr *MRReduceReq `protobuf:"bytes,15,opt,name=mrr,proto3,oneof"`
}

type Wrapper_Mrrr struct {
	Mrrr *MRReduceResult `protobuf:"bytes,16,opt,name=mrrr,proto3,oneof"`
}

type Wrapper_Ls struct {
	Ls *List `protobuf:"bytes,17,opt,name=ls,proto3,oneof"`
}

type Wrapper_If struct {
	If *Info `protobuf:"bytes,18,opt,name=if,proto3,oneof"`
}

type Wrapper_Ac struct {
	Ac *Activity `protobuf:"bytes,19,opt,name=ac,proto3,oneof"`
}

type Wrapper_Rp struct {
	Rp *Repeat `protobuf:"bytes,20,opt,name=rp,proto3,oneof"`
}

type Wrapper_Ms struct {
	Ms *Message `protobuf:"bytes,21,opt,name=ms,proto3,oneof"`
}

func (*Wrapper_Df) isWrapper_Msg() {}

func (*Wrapper_Hb) isWrapper_Msg() {}

func (*Wrapper_Cnp) isWrapper_Msg() {}

func (*Wrapper_Cul) isWrapper_Msg() {}

func (*Wrapper_Cdl) isWrapper_Msg() {}

func (*Wrapper_Crp) isWrapper_Msg() {}

func (*Wrapper_St) isWrapper_Msg() {}

func (*Wrapper_Rtq) isWrapper_Msg() {}

func (*Wrapper_Rtr) isWrapper_Msg() {}

func (*Wrapper_Dl) isWrapper_Msg() {}

func (*Wrapper_Mr) isWrapper_Msg() {}

func (*Wrapper_Mu) isWrapper_Msg() {}

func (*Wrapper_Mrm) isWrapper_Msg() {}

func (*Wrapper_Mrmr) isWrapper_Msg() {}

func (*Wrapper_Mrr) isWrapper_Msg() {}

func (*Wrapper_Mrrr) isWrapper_Msg() {}

func (*Wrapper_Ls) isWrapper_Msg() {}

func (*Wrapper_If) isWrapper_Msg() {}

func (*Wrapper_Ac) isWrapper_Msg() {}

func (*Wrapper_Rp) isWrapper_Msg() {}

func (*Wrapper_Ms) isWrapper_Msg() {}

var File_wire_proto protoreflect.FileDescriptor

var file_wire_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x70, 0x0a, 0x08,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x06, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0a, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x63, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x49, 0x64, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x92,
	0x01, 0x0a, 0x09, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6d, 0x61, 0x70, 0x12, 0x21, 0x0a, 0x06,
	0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x63, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x43, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x63, 0x4d, 0x61, 0x70, 0x1a, 0x37, 0x0a, 0x09, 0x43, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x69,
	0x70, 0x6c, 0x65, 0x43, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x31, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x32, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x33, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x33, 0x0a, 0x0b, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x64, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x64, 0x64, 0x72, 0x22, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x69, 0x62, 0x72, 0x69, 0x6c,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x09, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x75, 0x73, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x62, 0x75, 0x73, 0x79, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x61, 0x70, 0x1a,
	0x47, 0x0a, 0x0d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6d, 0x61, 0x70, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3a, 0x0a, 0x0e, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x0b, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64,
	0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x65, 0x0a, 0x0d, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x08, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x4c, 0x0a, 0x0e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x52,
	0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x64,
	0x0a, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x63, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x28, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x52, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5f,
	0x0a, 0x0a, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x73, 0x12, 0x21, 0x0a, 0x06,
	0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x05, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x69, 0x70, 0x6c, 0x65,
	0x43, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x08, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x22,
	0x20, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x22, 0x7e, 0x0a, 0x09, 0x4d, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x5f, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x47, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x22, 0x63, 0x0a, 0x08, 0x4d, 0x52, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a,
	0x01, 0x52, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x52, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x08, 0x4d, 0x52, 0x4d, 0x61, 0x70,
	0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x11,
	0x0a, 0x04, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x5f, 0x73, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x53, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x22, 0x7c, 0x0a, 0x0b, 0x4d, 0x52, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x04, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x49, 0x64, 0x12, 0x11, 0x0a,
	0x04, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x76, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b,
	0x76, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x82,
	0x01, 0x0a, 0x0b, 0x4d, 0x52, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x19,
	0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x04, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x22, 0x6e, 0x0a, 0x0e, 0x4d, 0x52, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x11, 0x0a, 0x04, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x22, 0x1a, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x1a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x26, 0x0a, 0x08, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x22, 0x08, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x22, 0x23, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xa3, 0x05, 0x0a, 0x07, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x02, 0x64, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x65, 0x66,
	0x69, 0x62, 0x72, 0x69, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x02, 0x64, 0x66, 0x12,
	0x1c, 0x0a, 0x02, 0x68, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x02, 0x68, 0x62, 0x12, 0x23, 0x0a,
	0x03, 0x63, 0x6e, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x48, 0x00, 0x52, 0x03, 0x63,
	0x6e, 0x70, 0x12, 0x20, 0x0a, 0x03, 0x63, 0x75, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52,
	0x03, 0x63, 0x75, 0x6c, 0x12, 0x22, 0x0a, 0x03, 0x63, 0x64, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x48, 0x00, 0x52, 0x03, 0x63, 0x64, 0x6c, 0x12, 0x23, 0x0a, 0x03, 0x63, 0x72, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x03, 0x63, 0x72, 0x70, 0x12, 0x18, 0x0a,
	0x02, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x48, 0x00, 0x52, 0x02, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x03, 0x72, 0x74, 0x71, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52,
	0x71, 0x48, 0x00, 0x52, 0x03, 0x72, 0x74, 0x71, 0x12, 0x1f, 0x0a, 0x03, 0x72, 0x74, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x52, 0x73, 0x48, 0x00, 0x52, 0x03, 0x72, 0x74, 0x72, 0x12, 0x19, 0x0a, 0x02, 0x64, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x02, 0x64, 0x6c, 0x12, 0x1c, 0x0a, 0x02, 0x6d, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x4d, 0x52, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x02,
	0x6d, 0x72, 0x12, 0x1b, 0x0a, 0x02, 0x6d, 0x75, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x4d, 0x52, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x02, 0x6d, 0x75, 0x12,
	0x1d, 0x0a, 0x03, 0x6d, 0x72, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4d,
	0x52, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x72, 0x6d, 0x12, 0x22,
	0x0a, 0x04, 0x6d, 0x72, 0x6d, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d,
	0x52, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x72,
	0x6d, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x6d, 0x72, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x4d, 0x52, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x71, 0x48, 0x00, 0x52,
	0x03, 0x6d, 0x72, 0x72, 0x12, 0x25, 0x0a, 0x04, 0x6d, 0x72, 0x72, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x52, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x72, 0x72, 0x72, 0x12, 0x17, 0x0a, 0x02, 0x6c,
	0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x02, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x66, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x05, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x02, 0x69, 0x66, 0x12, 0x1b, 0x0a,
	0x02, 0x61, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x02, 0x61, 0x63, 0x12, 0x19, 0x0a, 0x02, 0x72, 0x70,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x48,
	0x00, 0x52, 0x02, 0x72, 0x70, 0x12, 0x1a, 0x0a, 0x02, 0x6d, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x02, 0x6d,
	0x73, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x2a, 0x23, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x76,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4e, 0x54, 0x52, 0x4c, 0x52, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4d, 0x50, 0x4d, 0x47, 0x52, 0x10, 0x01, 0x2a, 0x1d, 0x0a,
	0x09, 0x46, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x49,
	0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x58, 0x54, 0x10, 0x01, 0x42, 0x08, 0x5a, 0x06,
	0x2e, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wire_proto_rawDescOnce sync.Once
	file_wire_proto_rawDescData = file_wire_proto_rawDesc
)

func file_wire_proto_rawDescGZIP() []byte {
	file_wire_proto_rawDescOnce.Do(func() {
		file_wire_proto_rawDescData = protoimpl.X.CompressGZIP(file_wire_proto_rawDescData)
	})
	return file_wire_proto_rawDescData
}

var file_wire_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_wire_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_wire_proto_goTypes = []interface{}{
	(ServType)(0),             // 0: Serv_type
	(FileType)(0),             // 1: File_type
	(*ChunkId)(nil),           // 2: Chunk_id
	(*ChunkMap)(nil),          // 3: Chunk_map
	(*StringTripleCSize)(nil), // 4: StringTripleCSize
	(*ReducerAddr)(nil),       // 5: ReducerAddr
	(*Defibrillate)(nil),      // 6: Defibrillate
	(*Heartbeat)(nil),         // 7: Heartbeat
	(*ChunkNodePorts)(nil),    // 8: ChunkNodePorts
	(*ChunkUpload)(nil),       // 9: ChunkUpload
	(*ChunkDownload)(nil),     // 10: ChunkDownload
	(*ChunkReplicate)(nil),    // 11: ChunkReplicate
	(*Store)(nil),             // 12: Store
	(*RetrieveRq)(nil),        // 13: RetrieveRq
	(*RetrieveRs)(nil),        // 14: RetrieveRs
	(*Delete)(nil),            // 15: Delete
	(*MRRequest)(nil),         // 16: MRRequest
	(*MRUpdate)(nil),          // 17: MRUpdate
	(*MRMapReq)(nil),          // 18: MRMapReq
	(*MRMapResult)(nil),       // 19: MRMapResult
	(*MRReduceReq)(nil),       // 20: MRReduceReq
	(*MRReduceResult)(nil),    // 21: MRReduceResult
	(*List)(nil),              // 22: List
	(*Info)(nil),              // 23: Info
	(*Activity)(nil),          // 24: Activity
	(*Repeat)(nil),            // 25: Repeat
	(*Message)(nil),           // 26: Message
	(*Wrapper)(nil),           // 27: Wrapper
	nil,                       // 28: Chunk_map.CMapEntry
	nil,                       // 29: Heartbeat.ChunkMapEntry
}
var file_wire_proto_depIdxs = []int32{
	1,  // 0: Chunk_id.f_type:type_name -> File_type
	1,  // 1: Chunk_map.f_type:type_name -> File_type
	28, // 2: Chunk_map.c_map:type_name -> Chunk_map.CMapEntry
	29, // 3: Heartbeat.chunk_map:type_name -> Heartbeat.ChunkMapEntry
	4,  // 4: ChunkNodePorts.nodes:type_name -> StringTripleCSize
	2,  // 5: ChunkUpload.chunk_id:type_name -> Chunk_id
	2,  // 6: ChunkDownload.chunk_id:type_name -> Chunk_id
	2,  // 7: ChunkReplicate.chunk_id:type_name -> Chunk_id
	1,  // 8: RetrieveRs.f_type:type_name -> File_type
	4,  // 9: RetrieveRs.retrieve:type_name -> StringTripleCSize
	5,  // 10: MRUpdate.reducer_addrs:type_name -> ReducerAddr
	6,  // 11: Wrapper.df:type_name -> Defibrillate
	7,  // 12: Wrapper.hb:type_name -> Heartbeat
	8,  // 13: Wrapper.cnp:type_name -> ChunkNodePorts
	9,  // 14: Wrapper.cul:type_name -> ChunkUpload
	10, // 15: Wrapper.cdl:type_name -> ChunkDownload
	11, // 16: Wrapper.crp:type_name -> ChunkReplicate
	12, // 17: Wrapper.st:type_name -> Store
	13, // 18: Wrapper.rtq:type_name -> RetrieveRq
	14, // 19: Wrapper.rtr:type_name -> RetrieveRs
	15, // 20: Wrapper.dl:type_name -> Delete
	16, // 21: Wrapper.mr:type_name -> MRRequest
	17, // 22: Wrapper.mu:type_name -> MRUpdate
	18, // 23: Wrapper.mrm:type_name -> MRMapReq
	19, // 24: Wrapper.mrmr:type_name -> MRMapResult
	20, // 25: Wrapper.mrr:type_name -> MRReduceReq
	21, // 26: Wrapper.mrrr:type_name -> MRReduceResult
	22, // 27: Wrapper.ls:type_name -> List
	23, // 28: Wrapper.if:type_name -> Info
	24, // 29: Wrapper.ac:type_name -> Activity
	25, // 30: Wrapper.rp:type_name -> Repeat
	26, // 31: Wrapper.ms:type_name -> Message
	3,  // 32: Heartbeat.ChunkMapEntry.value:type_name -> Chunk_map
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_wire_proto_init() }
func file_wire_proto_init() {
	if File_wire_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wire_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringTripleCSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReducerAddr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Defibrillate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkNodePorts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkUpload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkDownload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChunkReplicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveRq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveRs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Delete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MRRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MRUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MRMapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MRMapResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MRReduceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MRReduceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wire_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*Wrapper_Df)(nil),
		(*Wrapper_Hb)(nil),
		(*Wrapper_Cnp)(nil),
		(*Wrapper_Cul)(nil),
		(*Wrapper_Cdl)(nil),
		(*Wrapper_Crp)(nil),
		(*Wrapper_St)(nil),
		(*Wrapper_Rtq)(nil),
		(*Wrapper_Rtr)(nil),
		(*Wrapper_Dl)(nil),
		(*Wrapper_Mr)(nil),
		(*Wrapper_Mu)(nil),
		(*Wrapper_Mrm)(nil),
		(*Wrapper_Mrmr)(nil),
		(*Wrapper_Mrr)(nil),
		(*Wrapper_Mrrr)(nil),
		(*Wrapper_Ls)(nil),
		(*Wrapper_If)(nil),
		(*Wrapper_Ac)(nil),
		(*Wrapper_Rp)(nil),
		(*Wrapper_Ms)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wire_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wire_proto_goTypes,
		DependencyIndexes: file_wire_proto_depIdxs,
		EnumInfos:         file_wire_proto_enumTypes,
		MessageInfos:      file_wire_proto_msgTypes,
	}.Build()
	File_wire_proto = out.File
	file_wire_proto_rawDesc = nil
	file_wire_proto_goTypes = nil
	file_wire_proto_depIdxs = nil
}
